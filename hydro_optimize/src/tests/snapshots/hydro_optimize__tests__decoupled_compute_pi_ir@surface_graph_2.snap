---
source: hydro_optimize/src/tests/mod.rs
expression: ir.surface_syntax_string()
---
1v1 = source_stream (DUMMY_SOURCE);
2v1 = map (| res | { let (id , b) = res . unwrap () ; (hydro_lang :: location :: MemberId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < bool > (& b) . unwrap ()) });
3v1 = map (| (_ , b) | b);
4v1 = fold :: < 'tick > (stageleft :: runtime_support :: fn0_type_hint :: < (u64 , u64) > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; | | (0u64 , 0u64) }) , stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (u64 , u64) , bool , () > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; | (inside , total) , sample_inside | { if sample_inside { * inside += 1 ; } * total += 1 ; } }));
5v1 = map (:: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (u64 , u64) , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }));
6v1 = dest_sink (DUMMY_SINK);
// 7v1 = <handoff>;

1v1 -> 2v1;
2v1 -> 3v1;
3v1 -> 7v1;
5v1 -> 6v1;
4v1 -> 5v1;
7v1 -> 4v1;
