---
source: hydro_optimize/src/tests/mod.rs
expression: ir.surface_syntax_string()
---
1v1 = source_iter ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; let underlying_memberids__free = { let all_ids = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: location :: MemberId < () >] > (__hydro_lang_cluster_ids_1) } ; & all_ids [0 .. all_ids . len () / 3usize] } ; underlying_memberids__free });
2v1 = map (stageleft :: runtime_support :: fn1_type_hint :: < & hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent) > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; | id | (* id , MembershipEvent :: Joined) }));
3v1 = filter_map (stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , hydro_test :: __staged :: __deps :: hydro_lang :: location :: MembershipEvent) , core :: option :: Option < hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > > > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: simple_cluster :: * ; | (i , e) | match e { MembershipEvent :: Joined => Some (i) , MembershipEvent :: Left => None , } }));
4v1 = source_iter ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: simple_cluster :: * ; 0 .. 5 });
5v1 = cross_join_multiset :: < 'static , 'static > ();
6v1 = multiset_delta ();
7v1 = map (| (orig_dest , struct_or_tuple) : (:: hydro_lang :: location :: MemberId < _ > , _) | { let mut s = :: std :: hash :: DefaultHasher :: new () ; :: std :: hash :: Hash :: hash (& struct_or_tuple . 1 , & mut s) ; let partition_val = :: std :: hash :: Hasher :: finish (& s) as u32 ; (:: hydro_lang :: location :: MemberId :: < () > :: from_raw ((orig_dest . raw_id * 3usize as u32) + (partition_val % 3usize as u32) as u32) , struct_or_tuple) });
8v1 = map (stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32) , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)) > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: simple_cluster :: * ; | (id , n) | (id , (id , n)) }));
9v1 = map (:: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: MemberId < _ > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }));
10v1 = dest_sink (DUMMY_SINK);
11v1 = source_stream (DUMMY_SOURCE);
12v1 = map (| res | { let (id , b) = res . unwrap () ; (hydro_lang :: location :: MemberId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32) > (& b) . unwrap ()) });
13v1 = map (| (sender_id , b) | (:: hydro_lang :: location :: MemberId :: < _ > :: from_raw (sender_id . raw_id / 3usize as u32) , b));
14v1 = for_each (stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , i32)) , () > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: simple_cluster :: * ; | (id , d) | println ! ("node received: ({}, {:?})" , id , d) }));

1v1 -> 2v1;
2v1 -> 3v1;
3v1 -> 5v1;
4v1 -> 5v1;
5v1 -> 6v1;
6v1 -> 7v1;
7v1 -> 8v1;
9v1 -> 10v1;
8v1 -> 9v1;
11v1 -> 12v1;
12v1 -> 13v1;
13v1 -> 14v1;
