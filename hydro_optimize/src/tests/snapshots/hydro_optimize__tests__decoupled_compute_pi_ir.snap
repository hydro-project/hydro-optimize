---
source: hydro_optimize/src/tests/mod.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < (u64 , u64) , () > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; | (inside , total) | { println ! ("pi: {} ({} trials)" , 4.0 * inside as f64 / total as f64 , total) ; } }),
        input: Map {
            f: stageleft :: runtime_support :: fn1_type_hint :: < ((u64 , u64) , ()) , (u64 , u64) > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: live_collections :: optional :: * ; | (d , _signal) | d }),
            input: CrossSingleton {
                left: Reduce {
                    f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (u64 , u64) , (u64 , u64) , () > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; | (inside , total) , (inside_batch , total_batch) | { * inside += inside_batch ; * total += total_batch ; } }),
                    input: Persist {
                        inner: Map {
                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: compute_pi :: Worker > , (u64 , u64)) , (u64 , u64) > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: live_collections :: keyed_stream :: * ; | (_ , v) | v }),
                            input: Network {
                                serialize_fn: Some(
                                    :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (u64 , u64) , _ > (| data | { hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into () }),
                                ),
                                instantiate_fn: <network instantiate>,
                                deserialize_fn: Some(
                                    | res | { let (id , b) = res . unwrap () ; (hydro_lang :: location :: MemberId :: < hydro_test :: __staged :: cluster :: compute_pi :: Worker > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < (u64 , u64) > (& b) . unwrap ()) },
                                ),
                                input: Fold {
                                    init: stageleft :: runtime_support :: fn0_type_hint :: < (u64 , u64) > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; | | (0u64 , 0u64) }),
                                    acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < (u64 , u64) , bool , () > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; | (inside , total) , sample_inside | { if sample_inside { * inside += 1 ; } * total += 1 ; } }),
                                    input: Map {
                                        f: | (_ , b) | b,
                                        input: Network {
                                            serialize_fn: Some(
                                                :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: location :: MemberId < _ > , bool) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }),
                                            ),
                                            instantiate_fn: <network instantiate>,
                                            deserialize_fn: Some(
                                                | res | { let (id , b) = res . unwrap () ; (hydro_lang :: location :: MemberId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < bool > (& b) . unwrap ()) },
                                            ),
                                            input: Map {
                                                f: | b | (:: hydro_lang :: location :: MemberId :: < () > :: from_raw (__hydro_lang_cluster_self_id_0) , b),
                                                input: Map {
                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < (f64 , f64) , bool > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; | (x , y) | x * x + y * y < 1.0 }),
                                                    input: Map {
                                                        f: stageleft :: runtime_support :: fn1_type_hint :: < () , (f64 , f64) > ({ use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; | _ | rand :: random :: < (f64 , f64) > () }),
                                                        input: Map {
                                                            f: stageleft :: runtime_support :: fn1_type_hint :: < usize , () > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: tick :: * ; | _ | () }),
                                                            input: FlatMap {
                                                                f: stageleft :: runtime_support :: fn1_type_hint :: < () , std :: ops :: Range < usize > > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: tick :: * ; let batch_size__free = { use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; let batch_size__free = 8192usize ; batch_size__free } ; move | _ | 0 .. batch_size__free }),
                                                                input: Source {
                                                                    source: Spin,
                                                                    metadata: HydroIrMetadata {
                                                                        location_kind: Cluster(
                                                                            0,
                                                                        ),
                                                                        output_type: Some(
                                                                            (),
                                                                        ),
                                                                    },
                                                                },
                                                                metadata: HydroIrMetadata {
                                                                    location_kind: Cluster(
                                                                        0,
                                                                    ),
                                                                    output_type: Some(
                                                                        usize,
                                                                    ),
                                                                },
                                                            },
                                                            metadata: HydroIrMetadata {
                                                                location_kind: Cluster(
                                                                    0,
                                                                ),
                                                                output_type: Some(
                                                                    (),
                                                                ),
                                                            },
                                                        },
                                                        metadata: HydroIrMetadata {
                                                            location_kind: Tick(
                                                                0,
                                                                Cluster(
                                                                    0,
                                                                ),
                                                            ),
                                                            output_type: Some(
                                                                (f64 , f64),
                                                            ),
                                                        },
                                                    },
                                                    metadata: HydroIrMetadata {
                                                        location_kind: Tick(
                                                            0,
                                                            Cluster(
                                                                0,
                                                            ),
                                                        ),
                                                        output_type: Some(
                                                            bool,
                                                        ),
                                                    },
                                                },
                                                metadata: HydroIrMetadata {
                                                    location_kind: Cluster(
                                                        0,
                                                    ),
                                                    output_type: Some(
                                                        (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , bool),
                                                    ),
                                                },
                                            },
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    2,
                                                ),
                                                output_type: Some(
                                                    (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < () > , bool),
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                2,
                                            ),
                                            output_type: Some(
                                                bool,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Tick(
                                            0,
                                            Cluster(
                                                2,
                                            ),
                                        ),
                                        output_type: Some(
                                            (u64 , u64),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Process(
                                        1,
                                    ),
                                    output_type: Some(
                                        (hydro_test :: __staged :: __deps :: hydro_lang :: location :: member_id :: MemberId < hydro_test :: __staged :: cluster :: compute_pi :: Worker > , (u64 , u64)),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Process(
                                    1,
                                ),
                                output_type: Some(
                                    (u64 , u64),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Process(
                                1,
                            ),
                            output_type: Some(
                                (u64 , u64),
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Process(
                            1,
                        ),
                        output_type: Some(
                            (u64 , u64),
                        ),
                    },
                },
                right: Map {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < hydro_test :: __staged :: __deps :: tokio :: time :: Instant , () > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: live_collections :: optional :: * ; | _u | () }),
                    input: Reduce {
                        f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < hydro_test :: __staged :: __deps :: tokio :: time :: Instant , hydro_test :: __staged :: __deps :: tokio :: time :: Instant , () > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: live_collections :: stream :: * ; | _ , _ | { } }),
                        input: Source {
                            source: Stream(
                                { use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; let interval__free = { use hydro_test :: __staged :: __deps :: * ; use hydro_test :: __staged :: cluster :: compute_pi :: * ; Duration :: from_secs (1) } ; tokio_stream :: wrappers :: IntervalStream :: new (tokio :: time :: interval (interval__free)) },
                            ),
                            metadata: HydroIrMetadata {
                                location_kind: Process(
                                    1,
                                ),
                                output_type: Some(
                                    hydro_test :: __staged :: __deps :: tokio :: time :: Instant,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Tick(
                                1,
                                Process(
                                    1,
                                ),
                            ),
                            output_type: Some(
                                hydro_test :: __staged :: __deps :: tokio :: time :: Instant,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Tick(
                            1,
                            Process(
                                1,
                            ),
                        ),
                        output_type: Some(
                            (),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Tick(
                        1,
                        Process(
                            1,
                        ),
                    ),
                    output_type: Some(
                        ((u64 , u64) , ()),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Tick(
                    1,
                    Process(
                        1,
                    ),
                ),
                output_type: Some(
                    (u64 , u64),
                ),
            },
        },
        op_metadata: HydroIrOpMetadata,
    },
]
