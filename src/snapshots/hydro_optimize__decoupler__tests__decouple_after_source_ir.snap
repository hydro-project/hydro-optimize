---
source: hydro_optimize/src/decoupler.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < i32 , () > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: decoupler :: tests :: * ; | a | println ! ("Got it: {}" , a) }),
        input: Map {
            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , i32) , i32 > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: keyed_stream :: * ; | (_ , v) | v }),
            input: Network {
                serialize_fn: Some(
                    :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: MemberId < _ > , i32) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }),
                ),
                instantiate_fn: <network instantiate>,
                deserialize_fn: Some(
                    | res | { let (id , b) = res . unwrap () ; (hydro_lang :: MemberId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < i32 > (& b) . unwrap ()) },
                ),
                input: CrossProduct {
                    left: Map {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , ()) , hydro_lang :: __staged :: location :: member_id :: MemberId < () > > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: keyed_singleton :: * ; | (k , _) | k }),
                        input: FilterMap {
                            f: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , bool) , core :: option :: Option < (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , ()) > > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: keyed_singleton :: * ; let f__free = stageleft :: runtime_support :: fn1_type_hint :: < bool , core :: option :: Option < () > > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: networking :: * ; | v | if v { Some (()) } else { None } }) ; { let orig = f__free ; move | (k , v) | orig (v) . map (| v | (k , v)) } }),
                            input: FoldKeyed {
                                init: stageleft :: runtime_support :: fn0_type_hint :: < bool > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: networking :: * ; | | false }),
                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < bool , hydro_lang :: __staged :: location :: MembershipEvent , () > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: stream :: networking :: * ; | present , event | { match event { MembershipEvent :: Joined => * present = true , MembershipEvent :: Left => * present = false , } } }),
                                input: Persist {
                                    inner: Map {
                                        f: stageleft :: runtime_support :: fn1_type_hint :: < & hydro_lang :: __staged :: location :: member_id :: MemberId < () > , (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , hydro_lang :: __staged :: location :: MembershipEvent) > ({ use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; | id | (* id , MembershipEvent :: Joined) }),
                                        input: Source {
                                            source: Iter(
                                                { use hydro_lang :: __staged :: __deps :: * ; use hydro_lang :: __staged :: location :: * ; let underlying_memberids__free = unsafe { :: std :: mem :: transmute :: < _ , & [hydro_lang :: MemberId < () >] > (__hydro_lang_cluster_ids_1) } ; underlying_memberids__free },
                                            ),
                                            metadata: HydroIrMetadata {
                                                location_kind: Cluster(
                                                    2,
                                                ),
                                                output_type: Some(
                                                    & hydro_lang :: __staged :: location :: member_id :: MemberId < () >,
                                                ),
                                            },
                                        },
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                2,
                                            ),
                                            output_type: Some(
                                                (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , hydro_lang :: __staged :: location :: MembershipEvent),
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            2,
                                        ),
                                        output_type: Some(
                                            (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , hydro_lang :: __staged :: location :: MembershipEvent),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        2,
                                    ),
                                    output_type: Some(
                                        (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , bool),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    2,
                                ),
                                output_type: Some(
                                    (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , ()),
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Tick(
                                0,
                                Cluster(
                                    2,
                                ),
                            ),
                            output_type: Some(
                                hydro_lang :: __staged :: location :: member_id :: MemberId < () >,
                            ),
                        },
                    },
                    right: Map {
                        f: stageleft :: runtime_support :: fn1_type_hint :: < i32 , i32 > ({ use crate :: __staged :: __deps :: * ; use crate :: __staged :: decoupler :: tests :: * ; | a | a + 1 }),
                        input: Map {
                            f: | (_ , b) | b,
                            input: Network {
                                serialize_fn: Some(
                                    :: hydro_lang :: runtime_support :: stageleft :: runtime_support :: fn1_type_hint :: < (hydro_lang :: MemberId < _ > , i32) , _ > (| (id , data) | { (id . raw_id , hydro_lang :: runtime_support :: bincode :: serialize (& data) . unwrap () . into ()) }),
                                ),
                                instantiate_fn: <network instantiate>,
                                deserialize_fn: Some(
                                    | res | { let (id , b) = res . unwrap () ; (hydro_lang :: MemberId :: < () > :: from_raw (id) , hydro_lang :: runtime_support :: bincode :: deserialize :: < i32 > (& b) . unwrap ()) },
                                ),
                                input: Map {
                                    f: | b | (MemberId :: < () > :: from_raw (__hydro_lang_cluster_self_id_0) , b),
                                    input: Source {
                                        source: Iter(
                                            { use crate :: __staged :: __deps :: * ; use crate :: __staged :: decoupler :: tests :: * ; 0 .. 10 },
                                        ),
                                        metadata: HydroIrMetadata {
                                            location_kind: Cluster(
                                                0,
                                            ),
                                            output_type: Some(
                                                i32,
                                            ),
                                        },
                                    },
                                    metadata: HydroIrMetadata {
                                        location_kind: Cluster(
                                            0,
                                        ),
                                        output_type: Some(
                                            (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , i32),
                                        ),
                                    },
                                },
                                metadata: HydroIrMetadata {
                                    location_kind: Cluster(
                                        2,
                                    ),
                                    output_type: Some(
                                        (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , i32),
                                    ),
                                },
                            },
                            metadata: HydroIrMetadata {
                                location_kind: Cluster(
                                    2,
                                ),
                                output_type: Some(
                                    i32,
                                ),
                            },
                        },
                        metadata: HydroIrMetadata {
                            location_kind: Cluster(
                                2,
                            ),
                            output_type: Some(
                                i32,
                            ),
                        },
                    },
                    metadata: HydroIrMetadata {
                        location_kind: Tick(
                            0,
                            Cluster(
                                2,
                            ),
                        ),
                        output_type: Some(
                            (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , i32),
                        ),
                    },
                },
                metadata: HydroIrMetadata {
                    location_kind: Cluster(
                        1,
                    ),
                    output_type: Some(
                        (hydro_lang :: __staged :: location :: member_id :: MemberId < () > , i32),
                    ),
                },
            },
            metadata: HydroIrMetadata {
                location_kind: Cluster(
                    1,
                ),
                output_type: Some(
                    i32,
                ),
            },
        },
        op_metadata: HydroIrOpMetadata,
    },
]
